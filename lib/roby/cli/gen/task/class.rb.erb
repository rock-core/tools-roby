# frozen_string_literal: true

<% indent, open_code, close_code = ::Roby::CLI::Gen.in_module(*class_name[0..-2]) %>
<%= open_code %>
<%= indent %>class <%= class_name.last %> < Roby::Task
<%= indent %>    # You usually want this
<%= indent %>    terminates
<%= indent %>
<%= indent %>    # Declare an argument to the task. Use default: VALUE to set up a default
<%= indent %>    # value. The default can be nil
<%= indent %>    # argument :arg[, default: 1]
<%= indent %>
<%= indent %>    # Declare a new event. This defines updated_event which returns a
<%= indent %>    # Roby::EventGenerator
<%= indent %>    # event :updated
<%= indent %>
<%= indent %>    # Add forwarding to say "when event X is emitted, event Y should". This is
<%= indent %>    # usually used to make a task finish when an event is emitted
<%= indent %>    # forward :X => :Y
<%= indent %>
<%= indent %>    # Poll block. The given code is called at each Roby execution cycle as long
<%= indent %>    # as the task is running
<%= indent %>    # poll do
<%= indent %>    #   puts "Called !"
<%= indent %>    # end
<%= indent %>
<%= indent %>    # Script. This is the recommended way to implement functionality in tasks.
<%= indent %>    # It executes instructions in sequence, in a way that is compatible with
<%= indent %>    # Roby's reactor. For instance, below, block given to 'execute' will only be
<%= indent %>    # executed once the updated event is emitted
<%= indent %>    #
<%= indent %>    # WARNING: the top level of the script is evaluated at loading time.
<%= indent %>    #
<%= indent %>    # See the documentation of Roby::Coordination::Models::TaskScript. The API
<%= indent %>    # calls are the calls available on the script
<%= indent %>    #
<%= indent %>    # script do
<%= indent %>    #   # Waits for an event to be emitted
<%= indent %>    #   wait updated_event
<%= indent %>    #   execute do
<%= indent %>    #     # The code in this block is going to be called at runtime, unlike the
<%= indent %>    #     # code at the script level
<%= indent %>    #   end
<%= indent %>    # end
<%= indent %>end
<%= close_code %>
